:root {
  --lr-outer-cursor-size: 48px;
  --lr-outer-cursor-offset: -2.5px;
}

$default-ease: cubic-bezier(0.49, 0.225, 0.175, 0.86);

// if want to use the css approach, add the class on elements
.lr-fade-opacity {
  --lr-fade-opacity-animation-start: 10vh;
  --lr-fade-opacity-animation-end: 60vh;
  color: $main-dark-text-hsl-darker;
  background-clip: text;
  background-repeat: no-repeat;
  background-size: 0% 100%;
  background-image: linear-gradient(90deg, $main-dark-text, $main-dark-text);
  animation: scroll-reveal linear forwards;
  animation-timeline: view();
  // the default view() means that the animation will start when the element enters the viewport
  // and going to end when it's gone. changing the animtion range will tweak this behaviour
  animation-range-start: cover var(--lr-fade-opacity-animation-start);
  animation-range-end: cover var(--lr-fade-opacity-animation-end);
  & > * {
    display: inline;
  }

  @keyframes scroll-reveal {
    to {
      background-size: 100% 100%;
    }
  }
}

.cursor-word {
  text-transform: uppercase;
  color: $highlight;
  font-weight: 600;
  transform-origin: 50%;
  height: var(--lr-outer-cursor-size);
  font-size: 0.9rem;
  animation: rotate 2.5s linear infinite;

  border-radius: 50%;
  transition: opacity 0.3s $default-ease;
  span {
    position: absolute;
    transform: translate(var(--x), var(--y)) rotate(var(--rotate));
    /* Adjust anchoring point to center bottom, so the characteraligns around the circle */
    left: 43%;
    top: 26%;
  }

  @keyframes rotate {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
}
