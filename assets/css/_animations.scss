@use 'colors' as *;

:root {
  --lr-outer-cursor-size: 48px;
  --lr-outer-cursor-offset: -2.5px;
}

$default-ease: cubic-bezier(0.49, 0.225, 0.175, 0.86);
$skeleton-gradient: linear-gradient(
  90deg,
  rgba(255, 255, 255, 0.1) 25%,
  rgba(255, 255, 255, 0.2) 50%,
  rgba(255, 255, 255, 0.1) 75%
);

// if want to use the css approach, add the class on elements
.lr-fade-opacity {
  --lr-fade-opacity-animation-start: 10vh;
  --lr-fade-opacity-animation-end: 60vh;
  color: $main-dark-text-hsl-darker;
  background-clip: text;
  background-repeat: no-repeat;
  background-size: 0% 100%;
  background-image: linear-gradient(90deg, $main-dark-text, $main-dark-text);
  animation: scroll-reveal linear forwards;
  animation-timeline: view();
  // the default view() means that the animation will start when the element enters the viewport
  // and going to end when it's gone. changing the animtion range will tweak this behaviour
  animation-range-start: cover var(--lr-fade-opacity-animation-start);
  animation-range-end: cover var(--lr-fade-opacity-animation-end);
  & > * {
    display: inline;
  }

  @keyframes scroll-reveal {
    to {
      background-size: 100% 100%;
    }
  }
}

.cursor-word {
  text-transform: uppercase;
  color: $highlight;
  font-weight: 600;
  transform-origin: 50%;
  height: var(--lr-outer-cursor-size);
  font-size: 0.9rem;
  animation: rotate 2.5s linear infinite;

  border-radius: 50%;
  transition: opacity 0.3s $default-ease;
  span {
    position: absolute;
    transform: translate(var(--x), var(--y)) rotate(var(--rotate));
    /* Adjust anchoring point to center bottom, so the characteraligns around the circle */
    left: 43%;
    top: 26%;
  }

  @keyframes rotate {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
}

.cursor-rolling-menu-item {
  position: relative;
  overflow: hidden;
  line-height: 1 !important;

  span {
    pointer-events: none; // allow lr-cursor to work smoothly
    line-height: 1;
    transition: transform 0.3s $default-ease;
    inset: 0;
    width: 100%;
    display: inline-block;

    &:nth-child(1) {
      position: relative;
      transform: translateY(var(--translate));
    }
    &:nth-child(2) {
      position: absolute;
      padding: var(--padding);
    }
  }

  &:not(.router-link-active):not(.selected) {
    span:nth-child(2) {
      color: $secondary-dark-text;
    }
  }
}

.base-loader {
  background: $skeleton-gradient;
  animation: shimmer 2s infinite;
  background-size: 200% 100%;
}

.text-loader {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;

  .skeleton {
    @extend .base-loader;

    border-radius: 6px;
  }

  .title {
    height: 40px;
  }

  .subtitle {
    width: 50%;
    height: 25px;
  }
}

@keyframes shimmer {
  0% {
    background-position: 200% 0;
  }
  100% {
    background-position: -200% 0;
  }
}

// Mobile was really weird leaving the hvoer state while scrolling so we completely
// disable the effect on mobile! That's it :)
@media (hover: hover) {
  .cursor-rolling-menu-item:hover:not(.router-link-active):not(.selected) {
    span {
      &:nth-child(1) {
        transform: translateY(0);
      }
      &:nth-child(2) {
        transform: translateY(calc(var(--translate) * -1));
      }
    }
  }
}

/*
 * **********************************************************
 * ******************** vue transitions *********************
 * **********************************************************
 */
.transition-partial-fade-enter-active,
.transition-partial-fade-leave-active {
  transition: all 0.15s $default-ease;
}

.transition-partial-fade-enter-from,
.transition-partial-fade-leave-to {
  opacity: 0.4;
}

// -----

.transition-fade-enter-from,
.transition-fade-leave-to {
  opacity: 0;
}
.transition-fade-enter-active,
.transition-fade-leave-active {
  transition: all 0.3s $default-ease;
}
